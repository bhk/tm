TM, version 1.5

Features

  1. Small.
  2. Configurable.  On the command line, you can specify:
	- line separator (UNIX vs. DOS vs. arbitrary character)
	- window size & position
	- use of BIOS vs. direct access to any area of memory
	- tab-stop separation
	- color scheme
  3. Powerful features:
	- easily-definable macros
	- incremental search & replace
	- "unlimited" undo
	- display modes for control & graphics characters
  4. Support for many Emacs key bindings.
  5. Long lines are displayed wrapped, not truncated.


Usage

   "TM [switches] file"

   Valid switches:
	-x# : leftmost column on screen to use (0 by default)
	-y# : topmost line on screen to use (0 by default)
	-l# : number of lines to use (defaults to maximum)
	-w# : number of columns to use (defaults to maximum)
	-L# : how many lines fit on the screen (default = 25)
              A BIOS call reveals how many columns there are, but
	      there is no such call to inquire about lines.
	-c# : specify regular color
	-i# : specify inverse color
	-h# : specify highlight color
	-n# : Specify character to use as newline.
	-t# : specify tab-stop spacing (default = 8)
	-b  : force TM to use BIOS to access screen.  TM normally
              writes directly to the screen buffer if the display
	      type reported by BIOS is recognized.
	-b# : force TM to skip BIOS and write to screen memory at
	      segment page `#`.  For example, "-b0b8" corresponds
	      to segment B800H, the CGA screen buffer.  Note that
              improper use of this option can crash the computer.


  `#` represents a number.  An initial `0` indicates hexadecimal.


Overview

   TM is a modeless, visual editor.  It fills the screen with the
contents of the file being edited, indicating the end of the file
with a "ì" symbol, and places the cursor at the "point" (the spot
where text will be inserted).  Typing characters will insert them
into the document, and special keys and modifier keys are used to
invoke editing functions and navigate through the text.

   Here is a summary of the editing functions in TM and what keys
invoke them.  Throughout this document, we write "^K" to describe
pressing "K" while the "Control" key is held down, and "Alt-K" to
describe pressing "K" while the "Alt" key is held down.

   Navigation

   Arrow keys	: move one character or line at a time
   PgUp, PgDn	: move up/down a screen at a time
   Home		: move to the beginning of the line
   End		: move to the end of the line
   ^Left, ^Right: move left/right by one word
   ^PgUp, ^PgDn	: move to top/bottom of text
   ^B, ^F	: same as Left, Right
   Alt-B, Alt-F : same as ^Left, ^Right
   ^P, ^N	: same as Up, Down
   ^A, ^E	: same as Home, End
   ^V, Alt-V	: same as PgDn, PgUp
   Alt-N, Alt-P : scroll up/down one line at a time
   ^L		: scroll to center the cursor

   Basic Text Manipulation

   Backspace	: delete the character before the cursor
   Del, ^D	: delete the character at the cursor
   ^O		: insert line after point
   ^T		: swap the characters before and after the point
   ^Q		: insert the next character typed into the buffer
                  (do not interpret it as a command)

   Cut Buffer (Cutting and Pasting)

   ^SPC, ^@	: set mark
   ^End, ^K	: delete to end of line (kill)
   ^O		: insert a line after the cursor
   ^T		: transpose characters
   ^W		: delete to mark (wipe)
   ^Y		: undelete (yank)
   ^_		: undo last modification to the text buffer
   Alt-A        : append the next deletion to the cut buffer
   ^\           : exchange point and mark

   Other

   Escape, ^X	: bring up the menu
   ^X ^C	: exit
   ^X ^S	: save file
   ^X ^F	: find file
   ^X ^W	: write file (save as...)
   ^S		: search
   ^R		: search backwards
   Alt-Fx	: start/finish recording macro F1 ... F10
   Fx		: replay macro F1 .. F10
   Alt-G	: toggle display mode for graphics characters
   Alt-M	: remove all CR (^M) characters from the buffer
   ^G		: exit a menu, macro recording, or search mode


    When a menu is displayed, use the arrow keys to highlight the
desired option and press Enter to select it, or you can just type
the letter capitalized in the option name.

    To exit a menu and return to editing, press Escape.

   When a line in the text exceeds the physical screen width, the
remaining characters continue on the next screen line.  Whereever
the text wraps to the next line, TM displays the character in the
last column in inverse video.

   When moving up and down a line at a time, the cursor moves one
physical (visible) line at a time.  However, the operations bound
to ^E, ^A, or ^K refer to logical lines, which are defined by the
locations of newline characters in the text.


Graphics Characters

   By default, characters in the file are displayed using the IBM
PC character set (except for newline and tab, which indicate line
boundaries and tab stops).

   Alternate display modes display control characters (ASCII 0 to
31) as "^@", "^A", etc., and 8-bit characters (128 to 255) with a
hexadecimal notation of the form "\XX".  There is a total of four
modes, and Alt-G steps through them.

	Mode	Control chars		Eight-bit characters
	----	-------------		--------------------
(default) 0	, , , 		É, Í, Ñ, Î

	  1	^B, ^C, ^D, ^E		É, Í, Ñ, Î

	  2	, , , 		\C9, \CD, \D1, \CE

	  3	^B, ^C, ^D, ^E		\C9, \CD, \D1, \CE


Undelete

   When the ^W or ^K/^End functions are invoked, the deleted text
is moved to a buffer called the "cut buffer".  If the immediately
preceding key press also moved data to the cut buffer (^W, ^K, or
^End), the newly deleted text will be appended to the cut buffer.
Otherwise, the deleted text will *replace* what was previously in
the cut buffer.

   ^Y undeletes: it inserts the contents of the cut buffer at the
current cursor position.

   A typical way of using the cut buffer is:

	1. Put the cursor at the text you want to move.
        2. Delete the text, using ^W or one or more of ^K/^End.
	3. Move to where you want to place the deleted text.
	4. Type ^Y to undelete.

   To copy the text, simply undelete it twice: first, right after
deleting it, and then again, where you want the copy.

   You can use Alt-A to accumulate deletions.  After deleting and
then moving, another delete operation will ordinarily replace the
cut buffer contents, but pressing Alt-A immediately before the ^W
or ^K/^End function will cause it to append to the cut buffer.


Undo

   Every time a modification is made to the text buffer, an entry
is added to the "undo buffer", so that it may be undone.  This is
true for all editing operations except Convert Newlines (Alt-M).

   Typing ^_ after a modification will "undo" it.  Typing ^_ once
more will undo the previous modification. Each successive ^_ will
step further back into the history of the editing session.

   Each undo operation is itself a modification, and is similarly
recorded in the undo buffer.  So, if you find that you go too far
and want to undo the undo, make a minor modification to reset the
undo state back to the most recent change.  At that point, typing
^_ will undo your minor modification, and then additional presses
will undo your recent undo operations.

   A fixed-size buffer holds undo information.  When it fills up,
the oldest undo records are discarded to make room for newer undo
records.  Each undo record consumes 5 bytes, plus the size of any
text that was deleted.  The undo buffer is 64KB, large enough for
about 10,000 single-byte modifications.  Each undo operation also
adds an undo record to the buffer, so after 5000 single-byte undo
operations you would run out of undo space.

Incremental Search

   Typing ^S enters search mode.  On the status line, the current
search search string (initially empty) is displayed.  As you type
characters, they are added to the search string, and the matching
text in the document will found and displayed, placing the cursor
at the end of the match.

   When you first enter search mode, it performs case-insensitive
searches.  Typing an upper-case letter will make the search case-
sensitive, and this will remain in effect for the duration of the
search.  To match lower-case text in a case-sensitive manner, you
can type an upper-case letter and then backspace over it.

   Backspace removes charcters from the end of the search string,
and returns the text cursor to the position in the text previously
matched by that shorter search string.

   Escape exits search mode, leaving the cursor at the end of the
current match.

   ^G exits search mode, returning the cursor to the where it was
when search mode was entered.

   ^R or ^S will move to the next occurrence of the string before
(^R) or after (^S) the current match.  If there is no such match,
"Not found" will be displayed, and at that point, typing ^R or ^S
again will cause the seach to wrap around to the other end of the
document.

   ^Backspace enters Replace Mode; see "Search and Replace" below.

   All other "action" keys are executed normally, but after search
mode is exited with the point left where it is in the text.


Search and Replace

   To replace one string of characters with another, search for a
match for the string you want to replace and then, while still in
search mode, type ^Backspace.  This deletes the currently matched
occurrence and enters macro recording mode, allowing you to enter
its replacement.  When done, type ^S to enter replace mode, which
will advance to the next occurrence and ask "Replace? (Y,N,A,Q)":

   "Y" means "yes, replace this occurrence."
   "N" means, "no, skip this occurrence."
   "A" means, "yes, and replace all following occurrences without
asking again."
   "Q" exits replace mode immediately.

   Since the "replacement" operation is in fact a recorded macro,
it may contain arbitrary editing or navigation operations, and as
with macro playback, you can type ^G to interrupt the playback or
a replace-all operation.


Macros

   A macro is a recording of a sequence of keystrokes that can be
replayed later, as if you had typed them again, but with a single
keystroke.  Macros can be assigned to the keys F1-F10.  To record
a macro, do the following:

   1. Type Alt-F<x> to begin recording.
   2. Type anything (letters, control keys, whatever).
   3. Type Alt-F<x> again, to stop recording.

   Now, whenever you type F<x>, the keys you typed in step 2 will
be re-typed for you.  Here are a few finer points:

   1. If an error occurs while recording a macro, such as "buffer
      full", etc., the recording will be cancelled.

   2. Any error that occurs during playback will cancel playback.

   3. The Alt-F<x> key that you type to begin recording the macro
      determines the name of the macro (the key that will play it
      back).  Any Alt-F<x> key will terminate recording, and will
      not affect the name of the macro.

   4. Searches can be recorded as part of macros, but not replace
      operations.  Initiating a replace operation will cancel any
      in-progress macro recording.

   Macros can invoke macros.  Nesting is allowed up to a depth of
five levels.  When a macro invokes itself or invokes a macro that
invokes it, then it is a "recursive" macro.  When a macro invokes
itself only as the last keystroke in its definition, then it is a
"tail-recursive" macro.  Tail-recursive macros are not subject to
the nesting limits, so they can repeat indefinitely until stopped
by an error or by the user pressing ^G.

   While a macro is being recorded (e.g. via Alt-F1) its playback
key (e.g. F1) will have no effect at all.  When you play it back,
that recorded keystroke will invoke it recursively.


Newline Characters

    In DOS, lines endings in text files are indicated with a two-
character sequence: CR/LF (ASCII 13 & 10).  In UNIX, line endings
use a single charcter (LF).  In TM's internal buffer, a single LF
character is used for line endings.  By default, TM, when reading
from a file, will remove all CR characters, and when writing to a
file, will output a CR prior to each LF.  This is the ONLY change
that TM makes to files when reading or writing them.

    To disable this newline processing, you can include "-n10" on
the command line.  When "-n..." is given on the command line, all
CRs will be retained when the file is loaded and they will appear
as symbols at the end of each line.  Likewise, TM will not insert
CRs at the end of each line when saving the file, so the contents
of the file should be preserved exactly (except for any edits you
make).

    One more important detail about using "-n":  The command line
is processed in order, from left to right.  When the "-n" appears
before a file name, it will affect how the file is loaded and how
it is saved, but if the "-n" appears after the file name, it will
not affect how it is loaded.  This allows for various conversions
of line endings to be performed, as summarized here:

   "TM file"      : Read DOS or UNIX, write in DOS format.
   "TM file -n10" : Read DOS or UNIX, write in UNIX format.
   "TM -n10 file" : CR's will be visible, write exactly as read.


TM Differences From Emacs

  ù When you type PgDn followed by PgUp the cursor will be at the
    position it was in before PgDn/PgUp (except at extremities of
    the text).  This is because page down/up operations move both
    the cursor and the window pointer down by a certain number of
    lines, whereas in EMACS the cursor is relocated to the top of
    the screen for page up/dowm operations.

  ù ^P and ^N (up and down arrows) move by physical lines (screen
    lines), not logical lines.

  ù When a line is too long to fit within the screen width, Emacs
    Emacs wraps the text to the next line, and indicates wrapping
    by showing a "\" in the rightmost column.  When TM wraps long
    lines, it highlights the character in the rightmost column.

  ù Search & Replace:  ^Backspace, not Alt-%, enters replace mode
    from search mode.  The "replacement" is not just a string, it
    can be an arbitrary sequence of keystrokes.

  ù Both ^X and ESC invoke a menu, but many Emacs ^X key sequence
    bindings -- ^X^F, ^X^S, ^X^C, ^X^W -- retain their meaning in
    TM.

  ù Since TM can only handle one file at a time, ^X^F may present
    a menu asking whether you want to save the changes or discard
    them.

  ù Word-wise operations take only spaces as word delimiters, and
    both Alt-B and Alt-F leave the cursor at the start of a word.


Limitations and Caveats

   TM can load files that are up to approximately 60,000 bytes in
size.  This limit is based on the size of the memory it allocates
for holding the text while it is being edited -- 64KB minus stack
size and the TM executable itself.

   In its default mode for processing newlines (described above),
TM removes CRs after the file is loaded into the buffer, and then
re-inserts them at the end of each line (temporarily) whenever it
saves the file to disk.  As a result, while editing the text, you
can add more text to the buffer than will fit after the expansion
of CRs.  TM handles this situation by simply failing to re-insert
CRs when it runs out of room.  This ensures that the text will be
saved, and that it can be loaded again by TM, but does not ensure
that every line is terminated with CRLF; some may end in just LF.
For files under 60,000 bytes in size, this will not be a problem.
