;;; mem.8

;;; Get byte pointed to by pointer DI and increment DI
;;; On entry:  DI = text pointer
;;; On exit: AL = byte from text, DI points to next byte, C set if past
;;;		end of text
;;;
get_next_byte:
	mov al, ds:[di]
	inc di
	cmp textbufend, di
	ret

dec_ptr:
	dec di
	cmp di, textbuf
	ret

;;; Delete a region of bytes from the text.
;;;
;;; On entry:
;;;	AL = 2 => move bytes to cut buffer;  0 => discard
;;;	DI = first byte of block
;;;	SI = byte after block
;;; On exit:
;;;	Destroys CX
;;;
delete_di_to_si:		; source = SI...textbufend, destination = DI
	push si, di
	mov cx, si
	sub cx, di		; # bytes to delete
	mov si, di		; start of block
	test al			; Z => do not add to cut buffer
	xchg al, cutting	; set cutting status & get previous status
	if nz call copy_region
	call undo_rec_del	; Record deletion SI[0..CX]
	pop di, si
	mov cx, textbufend
	sub cx, si		; CX = # of bytes to move
	rep movsb		; move [SI...textbufend] to [point...?]
	mov textbufend, di
	ret


;;; On entry:
;;;	SI = DI = first byte to be deleted
;;;	CX = number of bytes
;;;	AL = 0 => clear buffer; nonzero => append to cut buffer
;;;
copy_region:
	pusha
	mov di, cb_size		; position in cut buffer
	test al
	if z mov di, 0		; previous command was not a cut command
	mov ax, cb_limit
	sub ax, di		; available space in cut buffer
	cmp cx, ax		; fits?
	mov al, msgcutfull	; "Cut buffer full!"
	ja jmp_error_msg
s2:	mov es, cb_seg		; es:di = cb_seg:cb_size = destination
	rep movsb		; *DI++ = *SI++  x  CX
	mov es, cs
	mov cb_size, di
	popa
	ret


;;; Insert AL at point, and increment point.
;;; On exit:
;;;	DI = (new) point
;;;	SI = (new) point - 2
;;;	CX == 1
;;;
ins_at_point:
	mov cx, 1
	;; jmp expand_at_point	; SI = old point-1, DI = NEW point

;;; Make room for CX bytes at point.  'point' is set to point + CX
;;; Also, load [point-1] with AL.
;;; On entry:
;;;	AL = character to place at point
;;;	CX = number of bytes to displace
;;; On exit:
;;;	SI = byte before OLD point, DI = point (new point)
;;;     Throws on out-of-memory.
;;;
expand_at_point:
	push ax
	call undo_rec_ins
	pop ax
	push cx
	mov di, textbufend
	mov si, di		; SI = current textbufend
	add di, cx		; DI = new textbufend
	jc >l5			; go if not enough memory (DI > 64K)
	cmp di, textbufmax
	ja >l5			; go if DI > textbufmax
	mov textbufend, di
	mov cx, si		; CX = current textbufend; SI = textbufend
	sub cx, point		; CX = # of bytes to move
	std
	inc cx			; move one extra byte at the end (uses slop)
	rep movsb		; ES = DS
	cld
	stosb			; [di++] = AL
	mov point, di
	pop cx
	ret
l5:	mov al, msgtextfull	; say "text buffer full"
jmp_error_msg:
	jmp error_msg


;;; Insert cut buffer into text at point.
;;;
insert_cut:
	mov cx, cb_size		; CX = # of bytes
	call expand_at_point
	inc si
	mov di, si		; DI = old point
	clear si		; SI = start of cut buffer
	push ds
	mov ds, cb_seg		; DS = cut buffer segment
	rep movsb		; move ds:[si] to es:[di]	(ES = CS)
	pop ds
	ret

;;; Write a recognizable invalid undo record... (size = 0)
;;;
undo_init:
	;; For now, don't worry about checking start of buffer
	clear cx
	;; jmp undo_rec_ins


;;; Record insert/delete.
;;; On entry:  CX = size, point = start of deletion/insertion
;;;
undo_rec_ins:	clc_skip1	; clear C => inser
undo_rec_del:	stc		; set C =>   delete
	pushf
	mov si, point
	call get_ubend		; ES:DI = ub_end; Z => no undo
	jz >u2
	mov ax, si		; AX = pos
	stosw			; write POS
	mov ax, cx		; AX = CX = size
	popf
	jnc >u1
	;; store bytes to-be-deleted...  (This is all that modifies SI & CX)
	rep movsb		; CX bytes from DS:SI to ES:DI
u1:	stosw			; store size
	rcl al, 1		; 0 => insert, 1 => delete (ignore other bits)
	stosb			; store "insert" or "delete"
	xchg ax, di
	mov ub_pos, ax
	mov ub_undo_pos, ax
	push ax
u2:	pop ax
	mov unsaved, 0ffh	; Deletes and inserts change the buffer...
undo_fix_es:
	mov es, cs		; restore ES
	ret


get_ubend:
	les di, ub_end
	mov ax, es
	test ax
	ret

;;; Read undo record, set point to pos, replace/remove text, update ub_undo_pos
;;;
do_undo:
	call get_ubend		; ES:DI = ub_end; Z => no undo
	jz undo_fix_es
	mov si, ub_undo_pos
	mov ds, ax		; DS = ub_seg
	mov es, cs
	sub di, si
	neg di			; DI = ub_undo_pos - ub_pos  (0=64K)
	dec di			; DI = free space - 1
	sub di, 11		; I think this is 1 or 2 more than necessary
	jc >l0			; go if out of room
	std
	dec si
	lodsw			; AX = [si]; SI -= 2
	xchg ax, bx		; BL = type of record
	lodsw			; AX = count
	cld
	mov cx, ax
	test ax			; size==0 => start-of-time marker
	jnz >l1
l0:	mov ds, cs
	mov al, msgnomore
	jmp jmp_error_msg
l1:	cmp di, ax
	jbe l0			; go if out of room
	test bl, 1		; 1 => undoing a deletion
	jz >i1
	sub si, ax		; del : skip the text bytes in the undo record
	push ds			; del : store ds for later
i1:	push si
	lodsw			; AX = pos
	mov ds, cs
	mov point, ax
	test bl, 1
	jnz >d2
	mov di, ax		; ins : Call delete_di_to_si
	add ax, cx		; ins
	mov si, ax		; ins
	call delete_di_to_si	; ins
	jmp >i2
d2:	call expand_at_point	; del : make room for CX bytes at point
i2:	pop si
	mov ub_undo_pos, si	; SI is at start of undo record
	test bl, 1
	jz >i3
	pop ds
	lodsw			; SI = position of deleted text
	mov di, ax
	rep movsb		; replace deleted text
	mov ds, cs
	mov point, ax
i3:	mov al, msgundo
	call draw_status
	jmp draw_page


;;; Allocate cut buffer and undo buffer.
;;; On exit: AX = cb_seg, BX = cb_limit, BP = ?, DI = ?, DX = ?
;;;
init_bufs:
	mov bp, ds		; BP = DS
	mov di, offset cb_seg	; DI = cb data
	lea bx, [bp+4096]	; 4096 * 16 = 64K   (BX = byte after code seg)
	mov ax, w[02]		; AX = segment pointer to end of memory
	sub ax, bx		; AX = top - end of code/stack segment
	jbe >l1			; No memory above code segment!
	cmp ah, 010		; See if avaible cut buffer memory > 64K
	if ae clear ax		; If so, use maximum number of "paragraphs"
	shl ax, 4		; CX = CX * 16		[186+]
	dec ax			; 0 paragraphs => 64 K
i1:	xchg ax, bx
	stosw			; set cb_seg
	mov [di], bx		; set cb_limit
	add ax, 8192
	cmp ax, w[02]
	ja ret
	sub ax, 4096
	mov ub_seg, ax
	ret

;;; Not enough memory above code segment --> split text buffer
;;; cut buffer <- 1/4, text buffer <- 3/4
l1:	mov ax, textbufmax
	mov bx, ax
	mov cx, ax
	sub ax, textbuf
	jc >l9
	shr ax, 6		; AX = # pargs / 4
	jz >l9
	shr bx, 4		; BX = parg for textbufmax
	sub bx, ax		; BX = parg for new textbufmax
	mov ax, bx
	shl ax, 4		; AX = new text limit
	mov textbufmax, ax
	xchg ax, cx
	sub ax, cx		; AX = cb_limit
	add bx, bp		; BX = cb_setg
	jmp i1

l9:	mov dx, dosmsgNoMem	; "Not enough memory"
	jmp err_exit


;;; This serves as a backstop for reverse searches.
initial_newline	db 0
textbuf		equ $
