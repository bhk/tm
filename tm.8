;;; tm.8

;;; `cld` is assumed throughout the program.

start:	mov ax, sp		; SP starts at the end of our 64KB(?) segment ;
	dec ah			; reserve 256 bytes for call stack
	mov di, dyn_buffers
	stosw			; set mxbufmax
	sub ax, MXBUF_SIZE
	stosw			; set mxdefsmax
	stosw			; set mxbuf
	sub ax, SRCHBUF_SIZE
	stosw			; set srchbuf
	sub ax, FNAME_SIZE	; file name (overlaps slop; see "uses slop")
	stosw			; set textbufmax
	call init_bufs		; allocate space for cut buffer and undo buffer
	call check_display	; set scrwid, scrhgt, and screen_seg
	call scan_args		; read args & set appropriate variables
	call set_dimensions	; fix xoff, yoff, maxX, & maxY, etc.
	mov al, msgBanner
	mov ah, invcolor
	call draw_status_color

i0:	call catch		; Top-level catch
	jc i0
	mov al, init_level
	cmp al, 1
	je >i1
	ja >i2
	;; Init level 0: load file (if there is a file name)
	call load_file

i1:	;; Init level 1: Initialize display state
	mov al, newline
	mov initial_newline, al	;  [textbuf - 1] exposed an assembler bug!
	call undo_init
	call force_redraw	; loads wnd_drawn with 0
	mov unsaved, al		; undo_init sets unsaved to 0FFh
	call go_top		; Set point & wnd_ptr; draw screen; set cursor

i2:	;;  Init level 2: Cancel macro and search modes
	mov init_level, 2
	call mx_halt
	mov srchmode, al	; srchmode = 0

	;; Main loop...
l0:	pushi l0		; (pushi HERE; jmp main_do) = (call main_do; jmp HERE)
	;; jmp main_do

;;; Get a keypress and perform its editing function.
main_do:
	shr cutting, 1		; Clear 'cutting' unless last function cut
	call maybe_clear_status
	call chk_drawn		; cmp wnd_ptr, wnd_drawn
	if nz call draw_page
	call set_text_cursor
	call dispatch_key	; Get key in AL, compare to 32
	db 0
	jge handle_literal	; AL is a printable character
lookup_do:
	mov di, key_aliases
	call assoc_b
	if nc mov al, [di]
	mov di, fn_bindings	; look for key in bindings[]
	call assoc_w
	push [di]
handler_state:
	;; Command handlers (do/go_...), when called from the main loop
	;; can expect the following register values.  Handlers called
	;; from elsewhere may document looser "On entry" conditions.
	mov di, point
	mov bx, cursor
	mov dl, newline
	mov dh, maxY
	mov si, offset text_mark
	ret


do_enter:
	xchg ax, dx		; for "mov al, dl"  ; DL = newline
handle_literal:
	pushi do_literal	; (pushi B; jmps A) is smaller than (call A; jmpl B)
	jmp handler_state


do_ctrlq:
	call getkey		; get next key typed
	jmps handle_literal


do_appendnext:
	mov cutting, 2
	ret


do_setmark:
	mov [si], di		; DI = point;  SI = &text_mark
	mov al, msgMarkSet
	jmps jmp_draw_status

do_xchgmark:
	call mark_check		; SI = &text_mark;  now AX = mark
	mov point, ax
	mov [si], di		; DI = point
	jmp expose_point

do_deltomark:
	call mark_check		; SI = & text_mark;  now AX = mark
	cmp di, ax		; DI = point
	if a xchg di, ax
	mov [si], di		; SI = & text_mark
	call set_point
	xchg ax, si		; for "mov si, ax"
delete_region_redisp:
	mov al, 2
	call delete_di_to_si
	jmp draw_page

;;; Set AX = [si], or textbufend, whichever is lower.  Abort if mark==0.
;;;
mark_check:
	mov ax, textbufend
	cmp ax, [si]
	jb >c1
	mov ax, [si]
c1:	test ax
	jnz ret
	pop ax
	mov al, msgMarkNot	; say "Mark not set."
jmp_draw_status:
	jmp draw_status


;;; Insert a newline at the point, without advancing.
;;;
do_insline:
	call do_enter
	mov al, 2		; Ctrl-B (go left)
	jmp lookup_do


;;; Switch [point-1] with [point]
;;;
do_twiddle:
	mov al, [di-1]
	cmp al, dl
	jz ret
	push ax
	call do_backspace
	call go_rgt
	pop ax
	jmp handle_literal


;;; Go to the start of the line
;;;
go_home:
	call find_sol
	mov point, si
	mov al, 0
	mov targetX, al
	jmp expose_point_at	; Now: make sure it's on screen, set cursor


;;; Go to the end of the line
;;;
go_end:
e1:	cmp [di], dl		; DL = newline
	je ret
	call go_rgt
	jnc e1
	ret


;;; go_pgup: Go up DH-1 (maxY-1) lines
;;;
u1:	call up1		; DI = point
	jc ret
	call top_up
go_pgup:
	dec dh
	jnz u1
	ret


;;; go_pgdn: Go down DH-1 (maxY-1) lines
;;;
d1:	call dn1
	jc ret
	call top_dn
go_pgdn:
	dec dh
	jnz d1
	ret


;;; Go right one word:  skip_nonwhite + skip_white
;;;
go_rgt_word:
	mov dx, go_rgt		; this determines direction for skip_...
	call skip_nonwhite
	;; jmp skip_white


;;; While character at point is whitespace, call DX to move point.
;;;
skip_white:
	call is_at_white		; see if on whitespace
	jnz ret			; if not, return
skip_white2:			; call "skip_white2" for action before test
	call dx			; call go_lft/rgt
	jnc skip_white		; if successful, repeat
	ret


;;; While character at point is NOT whitespace, call DX to move point.
;;; On exit:  C set if at end of text
;;;
skip_nonwhite:
	call is_at_white
	jz ret			; If on whitespace, return
	call dx			; call go_lft/rgt
	jnc skip_nonwhite	; if successful, repeat
	ret


;;; Go left one word: skip_white + skip_nonwhite
;;;
go_lft_word:
	mov dx, go_lft		; this determines direction for skip_...
	call skip_white2	; call it with action before test
	call skip_nonwhite
	jc ret
	;; jmp go_rgt


;;; Move point right by on character and move the cursor with it.
;;; If the point moves off the screen, call top_dn to expose it.
;;;
;;; On exit: C set => at end of text (DI undefined)
;;;	     C clear => not at end; DI = point
;;;
;;; On entry: --
;;; Destroys: AL
;;;
go_rgt:	mov di, point
	call get_next_byte
	jc ret			; if at end of text, can't go right
	call set_point
	mov bx, cursor
	call advance
	mov cursor, bx
	call chk_advance
g1:	mov targetX, bl
	clc
	ret


;;; Move point let by on character and move the cursor with it.
;;; If the point moves off the screen, call top_up to expose it.
;;;
;;; On exit: C set => at end of text (DI undefined)
;;;	     C clear => not at end; DI = point
;;;
;;; On entry: DI
;;;
go_lft:	call dec_ptr		; move pointer to previous byte in text
	jc ret			; if already at top of text, we're done now
	call set_point		; save updated pointer as point
	mov bx, cursor
	call retreat
	mov cursor, bx
	call chk_retreat
	jmp g1			; set targetX


;;; Insert character at point and update display
;;;
;;; On entry: BX, DI
do_literal:
	call ins_at_point	; insert AL into text at [point++]
	mov dx, bx		; DX = BX = original cursor pos
	call draw_char		; display AL, incrementing cursor
	if c jmp top_dn		; cursor off screen, move TOP down
	mov cursor, bx
	;; jmp draw_from_point


;;; Update screen contents from `point` to end of screen, or until
;;; the previously-drawn location matches the to-be-drawn location.
;;; Reset targetX.
;;;
;;; On entry:
;;;	BX = where text is TO BE displayed (cursor position)
;;;     DX = where text is currently displayed (cursor position)
;;;
draw_from_point:
	mov targetX, bl		; set target column for up- & down-line
	mov di, point
	 ; Display bytes until cursor pos. matches what it would have been
	 ; before the insertion/deletion (not used for deletion yet).
l1:	cmp bx, dx		; If current cursor pos != previous
	jz ret			;   then we're done updating screen.
	xchg bx, dx
	mov al, [di]		; Get what cursor pos would correspond
	call advance		;  to this text pos. BEFORE insertion
	xchg bx, dx
	call get_next_byte
	jc >l2
	call draw_char	; display byte & get new cursor pos
	jnc l1			; loop while we're not off-screen
	ret
l2:	mov al, EOT_CHAR	; At end of text
l3:	call draw_cell
	jc ret
	;; If we are deleting characters, display spaces until BX > DX
	mov al, ' '
	cmp bx, dx
	jbe l3
	ret


;;; Delete to end of line, or if at end of line, delete newline.  Add to cut
;;; buffer.
;;;
do_kill:
	mov si, di
	;; Advance SI to next newline (or textbufend)
k0:	cmp si, textbufend
	je >k1
	lodsb
	cmp al, dl
	jne k0
	dec si			; position of newline character
	cmp si, di
	if e inc si		; delete the newline
k1:	mov al, 2
	jmp >d1


;;; Backspace and delete character.
;;;
;;; On entry: DI
;;;
do_backspace:
	call go_lft
	jc ret
	;; jmp do_delete


;;; Delete the character at point.
;;;
;;; On entry: BX, DI
;;;
do_delete:
	mov al, 0		; don't save in cut buffer
	cmp di, textbufend
	je ret			; at end of text
	mov si, di
	inc si			; delete one byte
d1:	;; now: DI...SI describes region to delete
	mov dx, bx		; DX = BX = cursor position at DI
	push ax, di
	;; Find screen location of the end of the region (for draw_from_point)
	xchg di, si		; SI = start; DI = end
	call advance_to_di	; BX = cursor pos where region ends; SI = region end
	;; Modify buffer
	pop di, ax		; DI = start of region, SI now is at end
	call delete_di_to_si
	;; Update screen
	mov ax, point
	cmp ax, wnd_ptr		; If backspace may have moved DI off screen,
	jb ret			;   screen will have to be re-drawn.
	xchg dx, bx		; BX = where to display ; DX = where text WAS displayed
	jmp draw_from_point	; update display from point to end of screen


;;; Scroll text down one line on screen.
;;;
go_scrldn:
	call top_up
	jc ret
	cmp bh, dh		; bx = old cursor pos;  DX = maxY
	jnz ret			; if not on last line, return
	;; jmp up1


;;; Move up one line and set point and cursor.
;;; On entry:
;;;	DI = point
;;;	BX = cursor position
;;; On exit:
;;;     BX = new cursor position
;;;	C set => failed to move; DI undefined.
;;;	C clear => success; DI = point
;;;
up1:	mov cl, targetX		; cl = target column
	call mvup1
	jc ret			; no line above this one; return
	;; jmp set_cursor_and_point


set_cursor_and_point:
	mov cursor, bx
set_point:
	mov point, di
	ret			; Done moving cursor (return for update)

;;; Move up one line seeking column CL; do not save cursor & point.
;;;
;;; Destroys AX, BX, CX, BP
mvup1:	mov bp, -1
	mov ch, bh
	dec ch			; note that CH == -1 is possible...take care.
l1:	call dec_ptr
	jc ret			; return CARRY ==> end of text
	call reretreat
	cmp cx, bx
	jl l1			; loop while ((signed)BX > CX)
	ret			; CARRY=0 because BH==CH && BL <= CL


;;; Scroll up one line on screen.
;;;
go_scrlup:
	call top_dn
	jc ret
	test bh			; if on first line, move down
	jnz ret
	;; jmp dn1


;;; Move down one line and set point and cursor.
;;; On entry:
;;;	DI = point
;;;	BX = cursor position
;;; On exit:
;;;     BX = new cursor position
;;;	C set => failed to move; DI undefined.
;;;	C clear => success; DI = point
;;;
dn1:	mov ch, bh
	inc ch			; CH = target line
	mov cl, targetX		; CL = target column
l1:	call get_next_byte	; get_byte & inc DI
	jc >r1			; done if past end of text
	mov si, bx
	call advance		; Go to next cursor position (indicated by al)
	cmp bx, cx		; loop while BX <= target
	jbe l1
	mov bx, si		; Get previous cursor pos (the last one <= CX)
r1:	dec di
	cmp bh, ch
	jc ret			; end of text before next line...
	jmp set_cursor_and_point


;;; Move to top (start) of text
;;;
;;; On entry: --
;;;
go_top:	mov di, textbuf
	mov wnd_ptr, di
	;; jmp expose_point

set_and_expose_point:
	call set_point
	;; jmp expose_point

;;; Make sure point is in the range of characters displayed on the screen,
;;; wnd_ptr hasn't been changed, and cursor is correct.  If point is out
;;; of range, redisplay at position where point is on the desired line.
;;; This is called after wnd_ptr or point have been changed.
;;;
;;; On exit:	BX = cursor
;;; 		Destroys AX, DI, SI, BP
;;;
expose_point:
	mov al, maxY
	shr al, 1
expose_point_at:
	xchg ax, cx		; for "mov cl, al"; CL = target row
	clear bx
	call chk_drawn
	jne >c4
c1:	cmp si, point		; Is point still in displayed region?
	je >c3			; if so, just make sure cursor is set
	ja >c2			; if wnd_ptr>point, stop now and just recenter
	lodsb			; al = [si++]
	call advance		; get next screen position
	jnc c1			; loop while still on screen
c2:	mov bh, cl		; BH = target row
	call place_point	; went off screen
	jmps >c4
c3:	mov cursor, bx
	jmp >c9			; jmp set_text_cursor
c4:	call draw_page
c9:	jmp set_text_cursor


go_btm:	mov ax, textbufend
	mov point, ax
	mov bh, maxY
	jmps place_point


do_dispmode:
	inc dispmode
	jmps place_point	; BX = cursor (on entry)


;;; Place wnd_ptr such that point is in the middle line of the screen.
;;;
;;; On entry: --
;;;
do_recenter:
	mov bh, maxY
	shr bh, 1		; BH = maxY/2
place_point:			; Place point at line #BH on screen
	mov di, point
	call get_column		; set CX = start of physical line
	mov di, bp
	mov bl, 0		; move up from start of line
	mov cl, bl		; target column = 0
l1:	test bh
	jz >l2
	call mvup1
	jnc l1
	inc di			; before start of text
l2:	mov wnd_ptr, di
force_redraw:
	clear ax
	mov wnd_drawn, ax
	ret


do_yank:
	mov [si], di		; set mark to start of undelete region
	push di			; DI = point
	call insert_cut		; insert cut buffer into text.
	pop di			; DI = old point
	jmps draw_page2


;;; Set cursor, and redraw the screen if wnd_ptr != wnd_drawn.
chk_drawn:
	mov si, wnd_ptr
	cmp si, wnd_drawn
	ret


;;; Destroys AX, BX, CX, DI, SI, BP
;;;
draw_page:
	clear bx		; top left of window
	mov di, wnd_ptr		; pos in text area where window display starts
	mov wnd_drawn, di
	cmp di, point		; see if point >= wnd_ptr
	jbe >p3			; go straight to test condition, if so
p1:	call do_recenter	; This probably shouldn't happen
	jmp draw_page
p2:	call get_next_byte	; display until point is reached...
	jc p1			; at end of text BEFORE point!
	call draw_char
	jc p1			; at end of screen BEFORE point!
draw_page2:
p3:	cmp di, point
	jne p2
	mov cursor, bx		; set cursor to bx
p4:	;;  display from DI on starting at BX, clear to EOS if EOT
	call get_next_byte	; display until end of sceen or text
	jc >p5			; at end of text: clear rest of window
	call draw_char
	jnc p4			; continue if not at end of window
	ret
p5:	mov al, EOT_CHAR	; display Omega symbol for end of text
	call draw_cell
	jc ret
p9:	call draw_eol		; clear to EOL & advance to start of next line
	jnc p9
	ret


;;; Draw TAB at BX (display spaces up to next tab stop)
;;; On exit:
;;;	C set => past end of screen
draw_tab:
	mov al, 32
	call draw_text_cell
	jc ret
	mov al, bl
	mov ah, 0
	div tabwid		;  AL = column / tabwid , AH = remainder
	test ah
	jnz draw_tab
	ret


;;; Display a character from the document in one or more display cells, and
;;; advance to the next row/col. Control characters and 8-bit characters might
;;; occupy 2 or 3 cells, depending on dispmode.  TAB and NEWLINE may clear
;;; multiple cells.
;;;
;;; On entry: AL = character, BX = row/rol on display
;;; On exit:  BX = next row/col
;;; Destroys: AX
;;;
draw_char:
	test al, not 31
	jnz >l1			; go if not a control character
	call is_newline
	jz draw_eol
	jmpon TABCHAR, draw_tab
	;; Display control character
	test dispmode, 1
	jz >l1
	;; dispmode.0 = Ctrl-char attribute (0 = graphic character, 1 = "^x")
	;; dispmode.1 = UPPER ASCII attribute (0 = graphics character, 1="\nn")
	push ax
	mov al, '^'
	call draw_text_cell
	pop ax
	jc ret			; at end of screen
	add al, 64
	;; Check upper-ASCII characters
l1:	jns draw_text_cell	; not an 8-bit character
	test dispmode, 2
	jz draw_text_cell	; literal characters, not "\XX"
	push ax
	mov al, '\'
	call draw_text_cell	; write "\"
	pop ax
	jc ret			; at end of screen
	push ax
	shr4 al
	call >h1		; write first hex digit
	pop ax
	jc ret			; at end of screen
	and al, 15
h1:	;; draw hex digit for low 4 bits of AL
	add al, 48
	cmp al, '0'+10
	if ae add al, 'A'-'9'-1
	;; jmp draw_text_cell


;;; Write a character in the text buffer region: The rightmost column of
;;; cells are written in inverse video; others are drawn in `color`.
;;;
;;; On entry: AL = character, BX = position in window
;;; On exit:  BX = new cursor position, C flag set if BX is off screen
;;; Destroys: AX
;;;
draw_text_cell:
	;; swap 13 & 22 so that CRs get a more appropriate symbol
	cmp al, 13
	if nz cmp al, 22
	if z xor al, 13 xor 22
	mov ah, invcolor
	cmp bl, maxX
	je draw_cell_color
	;; jmp draw_cell


;;; Write a display character in the text color and advance.
;;;
;;; On entry: AL = character, BX = row/col  [draw_cell_color: AH = color]
;;; On exit:  AH = color, BX = next row/col
;;; Destroys: AL
;;;
draw_cell:
	mov ah, txtcolor
draw_cell_color:
	push cx
	mov cx, 1
	call draw_cells		; Display CX copies of AX at BX
	pop cx
	jmps advance_one	; move one cell to the right


;;; Clear to end of line & advance to start of next line
;;; On entry:	BX = cursor position
;;; On exit:	BX = new cursor position,
;;;		AX trashed.
;;;		C flag set if BX is off screen
draw_eol:
	push cx
	call clear_eol_color
	pop cx
	jmps advance_newline	; return with C not set if BH on screen


;;; Move cursor down one line
;;;
go_dn:	call dn1
	jc ret
	;; jmp chk_advance	; if cursorH>maxX, call 'top_dn()'


;;; Scroll down if necessary to expose cursor.
;;; On entry: BX = cursor
;;; Destroys AL.  Maintains BX=cursor.  Other registers unchanged.
;;;
chk_advance:
	cmp bh, maxY
	jbe ret
	dec bh
	mov cursor, bx
	;; jmp top_dn			; call top_dn() and return

;;; Move start of window down one line
top_dn:	push bx, di, si
	mov di, wnd_ptr			; where window starts
	clear bx
l1:	call get_next_byte
	jc >r1
	call advance
	test bl				; advance until BL = 0
	jnz l1
adjust_top_ret:
	mov wnd_ptr, di
r1:	pop si, di, bx
	ret


;;; Advance row/col to the next position following text character AL.
;;; Some text characters occupy multiple cells: dispmode=2 => "^X" is
;;; used for control characters, and dispmode=3 => "\XX" is used for 8-bit
;;; characters.
;;;
;;; On entry: AL = character, BX = row/col
;;; On exit:  BX = row/col,  C => BX was moved off-screen
;;;
advance:
	test al, not 31		; see if <= 31
	js >a0			; go if 8-bit character
	jnz advance_one		; go if normal character
	jmpon newline, advance_newline
	jmpon TABCHAR, >l1
	test dispmode, 1	; see how control characters are handled
	jz advance_one
	jmp >a1			; "^X" mode takes an extra byte
a0:	test dispmode, 2	; See how we should display 8-bit characters
	jz advance_one		; if not in "\XX" mode, go to normal case
	inc bx			; else add 3 to BL (won't overflow into BH)
a1:	inc bx

;;; Advance BX one character cell to the right; set C if off-screen.
;;;
advance_one:
	inc bx			; for "inc bl"; advance cursor for normal char
a2:	cmp maxX, bl		; see if past last column
	jnc ret			; return if within 0..maxX
	;; jmp advance_newline

;;; Advance BX to start of next line; set C if off-screen
;;;
advance_newline:
	mov bl, 0		; put bx at start of next line
	inc bh
	cmp maxY, bh
	ret			; return Carry if bh is off screen

l1:	;; Advance to next TAB stop
	push ax			; save AH
	mov al, bl
	mov ah, 0
	div tabwid
	add bl, tabwid		; add width of a tab, minus
	sub bl, ah		;    # of characters overlapping previous tab
	pop ax			; restore AH
	jmp a2


;;; Scroll up to expose cursor if necessary.
;;; On entry: BX = cursor pos

chk_retreat:
	cmp bh, 0ffh
	jnz ret
	inc bh
	mov cursor, bx
	;; jmp top_up


;;; Scroll "up": set wnd_ptr to the start of the physical line preceding
;;; the current wnd_ptr
;;;
top_up:	push bx, di, si
	mov di, wnd_ptr
	mov si, -1
	mov bx, 0100h
l1:	call dec_ptr
	jc >l3
	call retreat
	cmp si, bp
	je >a1
	mov si, bp
	mov di, si
	mov bl, 0
a1:	test bl			; retreat until BL = 0
	jnz l1
	dec di			; just to pre-compensate for following inc di
l3:	inc di
	jmp adjust_top_ret

;;; Move cursor up one line
;;;
go_up:	call up1
	jnc chk_retreat		; if cursorH=-1, call 'top_up()'
	ret


;;; Find cursor position after moving point backwards, without moving
;;; 'wnd_ptr', so BX may point off screen (line -1, column 0, for example).
;;;
;;; On entry:
;;;	DI = position where cursor will be
;;;	BX = cursor position
;;; On exit:
;;; 	Destroys AX, BX, BP
;;;
retreat:
	mov bp, -1
reretreat:
	test bl
	jnz >l1
	mov bl, disp_cols
	dec bh
l1:	dec bx			; for "dec bl"
	cmp b[di], 32		; Check for control characters & high-bit
	jge ret			; if ((signed) AL) >= 32, return now
				; Otherwise, "give up" and use get_column.
	;; A somewhat more efficient algorithm would only use get_column for
	;;  tab, newline, and for the other ctrl chars only when dispmode != 0.
	;;-- If newline or tabchar...
l3:	cmp di, bp		;  bp may hold the value of a much
	jb get_column		;  closer known start-of-line
	push si			; If it is set, we'll assume it's still
	mov si, bp		; valid.
	jmps get_column_from_si


;;; Find what column a given point in text would occur in.
;;; On entry:  DI = a point in the text
;;; On exit:   BL = cursor column corresponding to SI
;;;	     BH unchanged.
;;;	     AX undefined.
;;;	     BP = position of the most recent start of physical line
get_column:
	push si
	call find_sol		;    start from the beginning of the line.
get_column_from_si:
	mov ah, bh
	mov bl, 0		; BX tracks what cursor pos would be
	call advance_to_di
	mov bh, ah
	pop si
	ret

;;; Find cursor position corresponding to text position DI.
;;;
;;; On entry:
;;;	SI = a position in the text
;;;	DI = a position following SI
;;;	BX = cursor position of SI
;;; On exit:
;;;	BX = cursor position of DI
;;;	DI = SI = entry DI
;;;	BP = last text position at the start of a physical line
;;;
l0:	lodsb			; al = [SI++]
	call advance
	cmp bh, disp_lines
	if a dec bh		; If BH > disp_lines, dec BH
advance_to_di:
	test bl
	if z mov bp, si		; Keep track of the start of the physical line.
	cmp si, di		; If at byte where cursor is,
	jne l0			;   we're done
	ret


;;; Set the BIOS cursor to the text area (given by 'cursor')
;;;
set_text_cursor:
	mov bx, cursor
	;; jmp set_cursor


;;; Set the BIOS cursor to BX (BX is considered relative to topleft)
;;;
set_cursor:
	pusha
	mov ah, 2		; 2 = set cursor position
	mov dx, bx		; DH = cursor Y, DL = cursor X
	add dx, topleft		; WARNING: if xoff+BL exceeds 256....
	mov bh, 0		; page 0
	int 010h
	popa
	ret


scan_args:
	mov si, ARGBUF		; first byte of arguments
	lodsb
	mov b[si-1], 0
	jmp >s1
s0:	;; get next character
	lodsb			; AL = *SI++
s1:	call dispatch_al
	bind_rel ret, keyENTER
	bind_rel s0, keySPC
	bind_rel >s3, '-'	; evaluate switch...
	db 0
	dec si
	mov di, ARGBUF		; Take arg as file name, put SI at end of arg
f0:	movsb
	cmp b[si], 32
	jg f0
	mov b[di], 0
	jmp s0
s3:	lodsb			; get switch letter
	call is_white
	jz sa_err
	xchg cx, ax		; for "mov cl, al";   CL = switch letter
	call get_num		; get number -> AL
	xchg ax, cx		; AL = switch letter;  CL = numeric value
	;; Set arg value referenced by AL to BL
	cmp al, 'n'		; check for argument 'n'
	jne >l2
	mov verbatim, al	; On '-n...', set verbatim non-zero
l2:	mov di, argbindings	; first look for standard binding
	call assoc_rel		; find variable associated with arg
	jc sa_err		; not in arg/variable binding list
	mov [di], cl		; put bl in variable
	jmp s0			; This & fallthrough performs next two lines


sa_err:	mov dx, dosmsgBadArg	; report command line error
	;; jmp err_exit


;;; Display error msg at DX to console and exit to DOS.
;;;
err_exit:
	mov ah, 09h		; print '$'-terminated string starting at DX
	int 021h		; print error
	jmp opt_quit_y


;;; Read decimal number at [SI] (terminated by CR or space)
;;;  On return:	AL = value of number
;;;		AH, BX = destroyed
;;;		SI = char after string (either SPACE or CR)
get_num:
	mov bh, 10
	cmp b[si], '0'
	if z mov bh, 16
	mov al, 0
l1:	mov bl, [si]		; Get next digit
	cmp bl, 32
	jbe ret

        ;; get hex digit value
	and bl, not 030h
	cmp bl, 'A'
	if ae sub bl, 'A' - 10

	cmp bl, bh
	jae sa_err
	mul bh			; AX = AL*base
	add al, bl		; AL = AL*base + bl
	inc si
	jmp l1


;;; Write message number AL on the status line in highlight color.
;;;
;;; On entry: AL = message number
;;; On exit:  BX = next cursor position
;;; Destroys: AX
;;;
draw_status:
	mov ah, hltcolor
	;; jmp draw_status_color


;;; Write message on the statuc line and clear to the end of the line.
;;;
;;; On entry: AL = message number; AH = color
;;; On exit:  BX = next cursor position
;;; Destroys: AL
;;;
draw_status_color:
	mov bl, 0
	pushi clear_eol
	;; jmp draw_status_at


;;; Write message on the status line.
;;;
;;; On entry: AL = message number; AH = color; BL = column
;;; On exit:  BX = next cursor position
;;; Destroys: AL
;;;
draw_status_at:
	mov clrstat, 2		; draw_status_at     at BL
	mov bh, maxY
	inc bh
	;; jmp draw_msg


;;; Write message AL at location BX.
;;;
;;; On entry: AL = message number; AH = color; BX = row/col
;;; On exit:  BX = new row/col
;;; Destroys: AL
;;;
draw_msg:
l2:	push si
	test al
	js >f0			; 128 => show filename
	;; find message #AL  (starts at 1)
	mov si, msg0
	mov cl, al
	mov ch, 0
d1:	lodsb
	test al
	jnz d1
	loop d1
d2:	call draw_msgstr
d3:	pop si			; Restore position in enclosing string
	ret

        ;; Display filename
f0:	mov si, ARGBUF
f1:	lodsb
	test al
	jz d3
	call draw_cell_color
	jmp f1


;;; Write message (at SI) to display (at BX).
;;;
l0:	neg al
	call draw_msg
draw_msgstr:
	lodsb			; al = *SI++
	test al
	jz ret
	js l0			; If high bit set, display substring.
	test bl
	if z and al, 95		; capitalize AL
	call draw_cell_color
	test bl
	jnz draw_msgstr		; loop while not past end of line
	mov bl, disp_cols
	dec bh
l1:	lodsb			; be sure to get to end of string
	test al
	jnz l1
	ret


;;; Clear status if clrstat indicates it is pending.
;;;
maybe_clear_status:
	shr clrstat, 1
	jnc ret
	;; jmp clear_status

;;; Clear the status line.
;;; Destroys: AX, BX, CX
;;;
opt_done:
clear_status:
	mov bl, 0
	mov bh, maxY
	inc bh
	;; jmp clear_eol_color

;;; Clear from BX to end of line.
;;; Destroys: AX, CX
;;;
clear_eol_color:
	mov ah, txtcolor
clear_eol:
	mov cl, disp_cols
	sub cl, bl
	mov ch, 0
	mov al, 020h		; 020h = space
	;; jmp draw_cells	; fall through


;;; Write characters to a text-mode display cell.
;;; On entry: AL = character, AH = attribute, BH/BL = row/col, CX = reps
;;; Destroys: CX
;;;
draw_cells:
	push bx
	test screen_page
	jz >l1
	;; Write directly to video buffer
	push es, di
	mov es, screen_seg
	xchg ax, di		; DI = attribute & char
	add bx, topleft		; adjust for positioning of topleft
	mov al, scrwid
	mul bh			; AX = scrwid*line
	mov bh, 0
	add ax, bx		; AX = scrwid*line + column
	add ax, ax
	xchg ax, di		; DI = address; AX = attribute & char
	rep stosw		; store CX char/attribute pairs at ES:[DI++]
	pop di, es
	jmp >l2
	;;   Use BIOS to display character
l1:	call set_cursor		; put cursor at BX
	mov bx, 0009		; bh = page 0;  bl = 9
	push ax
	xchg bl, ah		; bl = color;  ah = function 9
	int 010h		; Display CX spaces
	pop ax
l2:	pop bx
	ret


do_esc:
	mov si, esc_menu
	;; jmp menu_show


;;; Show menu.
;;; On entry: SI = menu to display
;;; Preserves none.
;;;
menu_show:
	lodsb			; AL = prompt message
	call draw_status
	;; b[SI]            = count
	;; w[SI+1]          = actions
	;; SI + 3           = start of names
	;; SI + 3 + count   = start of vectors
	mov bh, 0
s1:	;; Move selection to next option (1 = first option)
	inc bh
s2:	cmp bh, [si]
	if a sub bh, [si]

	;; Always at m1:
	;;   BH = current option (option to be highlighted)
	;;   BL = meuncol (column where menu title ended)
	;;   SI = menu data (b[si] = # of options, w[si+1] = addr. of bindings)
m1:	call menu_show_options	; highlight current option
	call dispatch_key
	bind_rel opt_done, keyESC, ctrlG
	bind_rel s1, keyRIGHT
	bind_rel >s3, keyENTER
	bind_rel >s4, keyLEFT
	db 0
	jz s1			; spacebar => next option

	;; Check keymap (keys => option number)
	and al, 95		; Make lower-case upper
	mov di, [si+1]
	call assoc_b		; C => no match
	jc m1
	mov bh, [di]		; BH = [si++]

s3:	;; Jump to vector for option BH
	;; addr = SI + 3 + COUNT + N*2  (BH=N+1)
	lodsb			; SI++ ; AL = count
	add al, bh
	add al, bh
	cbw
	xchg ax, bx		; for "mov ax, bx"
	push [bx+si]
	jmps clear_status	; clear status before calling vector

s4:	;; Move selection to previous option
	dec bh			; left arrow: Go to previous option
	add bh, [si]
	jmp s2


;;; Display the menu options starting at column BL, highlighting option BH.
;;; On entry: SI = address of "# of menu options"
;;; Destroys AX, DL
;;;
menu_show_options:
	push bx, si
	mov dl, bh		; highlighted option
	mov dh, [si]		; count of options
	add si, 3		; start of option names

l0:	;; Always: DH = # of options remaining
	;;	   DL = # of options before highlighted one
	;;	   SI = next option name
	;;	   BL = current column
	add bl, 3
	mov ax, inv_and_hlt	; AL = invcolor, AH = hltcolor
	dec dl
	jnz >l1
	push bx			; PUSH column where inverted option starts
	xchg al, ah		; if dl=dh, use inverse...
l1:	lodsb
	call draw_status_at
	dec dh
	jnz l0
	pop ax			; DL = column where highlighted option started
	mov bl, al
	call set_cursor
	pop si, bx
	ret


;;; Save changes before exiting
;;;
opt_quit_save:
	call opt_save		; this might prompt "Enter filename:"
	call get_filename	; see if user entered a filename
	jnz opt_quit_y		; valid filename => has been saved
	;; jmp opt_quit		; back to menu


;;; Quit (^X^Q)
;;;
opt_quit:
	mov si, exit_menu	; "Abort and lose changes?"
	test unsaved
	jnz menu_show
	;; jmp opt_quit_y

;;; Quit/Yes (discard unsaved changes)
;;;
opt_quit_y:
	call clear_status
	dec bh
	call set_cursor
	mov ax, 04c00
	int 021h


;;; Set srcwid, scrhgt, and screen_seg (if BIOS mode is known)
;;;
check_display:
	mov ah, 0Fh
	int 010h		; AH <- # of columns;  AL <- video mode number
	cmp al, 7		; test BIOS mode
	mov al, 0b8		; AX = 0b800 = CGA screen segment
	jb >c1			; use segment b800 for video modes < 7
	if a sub al, 0b0	; use BIOS for mode > 7 (screen_seg = 0)
	sub al, 08		; use segment b000 for mode 7
c1:	mov screen_page, al	;  else !=0 and !=1 ==>  use as segment MSB
	;; Now set scrwid and scrhgt  (AH still == # of columns)
	mov si, 044h
	mov ds, si
	lodsb			; al = b[0044:0044] = b[0000:0484] = scrhgt-1
	;; mov ah, [0000:044Ah]	-- we already have this in AH!
	mov ds, cs
	inc ax			; for "inc al"
	xchg al, ah		; AH=lines, AL=cols
	mov hgt_and_wid, ax	; hgt=AH, wid=AL
	ret


;;; Set Z if [DI] is a whitespace character
;;;
is_at_white:
	mov al, [di]
	;; jmp is_white

;;; Set Z if AL is a whitespace character
;;;
is_white:			; returns Z if AL is a whitespace char
	jmpon 32, ret
	jmpon 13, ret
	jmpon TABCHAR, ret
is_newline:
	cmp al, newline
	ret


beep:	push ax, dx
	mov ah, 2
	mov dl, 7
	int 021h
	pop dx, ax
	ret


;;; Search a bind_w table.  A zero key terminates the table.
;;;
;;; On entry:	AL = key to search for
;;;		DI = address of table
;;; On exit:	NoCarry => found;     DI = address of value in matching pair
;;;		Carry   => not found; DI = address following terminating zero
;;;		Other registers unchanged.
;;;
l0:	scasw				; for "inc DI, 2"
assoc_w:
	scasb				; cmp al, [di++]
	jz ret				; If AL is found, return NoCarry
	cmp b[di-1], 1
	jnc l0
	ret				; If [di-1] == 0, return with Carry


;;; Search a bind_b table.  A zero key terminates the table.
;;;
;;; On entry:	AL = key to search for
;;;		DI = address of table
;;; On exit:	NoCarry => found;     DI = address of value in matching pair
;;;		Carry   => not found; DI = address following terminating zero
;;;		Other registers unchanged.
;;;
l0:	inc di				; for "inc DI, 2"
assoc_b:
	scasb				; cmp al, [di++]
	jz ret				; If AL is found, return NoCarry
	cmp b[di-1], 1
	jnc l0
	ret				; If [di-1] == 0, return with Carry


;;; Search a bind_rel table.  A zero key terminates the table.
;;; Each value is a relative offset to an address that will be automatically
;;; resolved on success.
;;;
;;; On entry:	AL = key to search for
;;;		DI = address of table
;;; On exit:	NoCarry => found;     DI = address referenced by value
;;;		Carry   => not found; DI = address following terminating zero
;;;		Other registers unchanged.
;;;
assoc_rel:
	call assoc_b
	jc ret
	push ax
	mov al, [di]
	cbw
	add di, ax
	pop ax
	clc
	ret


;;; Find start of line containing DI, putting result in SI.
;;;
find_sol:
	mov si, di
	mov al, newline
l1:	dec si
	cmp al, b[si]
	jne l1
	inc si
	ret


;;; Make sure X & Y dimension parameters are within limits, and set
;;; certain derived values, such as maxX and maxY.
;;; Uses SI, AX, BX
set_dimensions:
	mov si, offset yoff
	mov al, 2		; minimum size for Y
	call set_one_dim	; check & set Y dimension paramters
	dec maxY		; maxY should really be disp_lines-2
	dec si
	mov al, 20		; minimum size for X
	;; jmp set_one_dim	; check & set Y dimension paramters


;;; On entry:
;;;	SI = pointer to dimention structure
;;;	AL = minimum size for window in this dimension
;;; Comments are written as if we only run this on X dimensions, but they
;;; anaologously apply to Y dimensions.
;;; Structure members:
;;;	d_offs = xoff or yoff
;;;	d_cols = disp_cols or disp_lines
;;;	d_max = maxX or maxY
;;;	d_wid = scrwid or scrhgt

set_one_dim:
	 ; if (xoff+min_size > scrwid) {xoff = scrwid-20;}
	mov bl, d_wid
	neg al
	add al, bl		; al = scrwid-20
	cmp al, d_offs
	if b mov d_offs, al	; if unsigned AL < xoff, set xoff = AL
	 ; disp_cols = (disp_cols ? disp_cols : scrwid)
	 ; if (disp_cols > scrwid-xoff) {disp_cols = scrwid-xoff;}
	mov ah, d_cols
	test ah
	if z mov ah, bl		; AH = (disp_cols ? disp_cols : scrwid)
	mov bh, bl
	sub bh, d_offs		; BH = scrwid-xoff
	cmp ah, bh		; if (disp_cols > scrwid-xoff)
	if a mov ah, bh		;    AH = scrwid-xoff
	mov d_cols, ah
	dec ah
	mov d_max, ah		; maxX = disp_cols - 1
	ret

;;; Remove all CR's from the text.
;;;
do_stripCRs:
	call remove_CRs
	mov init_level, 1	; re-init display state
	jmps throw


;;; On entry: --
do_abort:
	mov al, msgIntr	; "^G"
	;; jmp error_msg


;;; On entry: AL = message ID
error_msg:
	call draw_status	; Display error message
	call beep
	;; jmp throw


;;; Transfer control to the current catcher.
;;;
throw:	mov sp, catch_sp
	pop ax
	stc
	ret


;;; Initiate catching.  When initially called, it returns with C clear,
;;; and catching will remain active until the caller issues a RET.  If a
;;; throw is caught, it "returns again" with C set and catching inactive.
;;;
;;; A function calling catch must call it before pushing any values onto
;;; the stack, so that *its* caller's return address will be at the top.
;;; The initial call to catch pushes the following values onto the stack:
;;;
;;;     handler (the instruction after "call catch")
;;;     previous catch_sp
;;;     c1 (cleanup code)
;;;
;;; At this point, a RET instruction will jump to c1, which will pop the
;;; other two values and return to the caller's caller.   In the event
;;; of a throw -- when catch returns with C set -- the SP will have its
;;; original value.
;;;
;;; On return:
;;;	If C is NOT set, return address has been saved.
;;;	If C IS set, error has occurred and all registers are corrupted.
;;;     Destroys AX.
;;;

catch:	pop ax
	push ax			; our return address is the handler
	push catch_sp		; save previous catch_sp
	mov catch_sp, sp
	clc
	call ax
c1:	;; clean up stack & return to caller's caller
	pop catch_sp
	add sp, 2
	ret
