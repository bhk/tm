;;; dos.8 : MS-DOS file-related routines.

public load_file, opt_save, remove_CRs, opt_load, opt_save_as, opt_load_save


;;; Load a new file (^X^F)
;;;
opt_load:
	call get_filename
	and al, b[di]		; AL = filename && unsaved
	jz opt_replace		; If no name, or no unsaved changes, load file
	mov si, load_menu	; Else ask "Lose changes?"
	jmp menu_show


;;; Save changes before loading a new file
;;;
opt_load_save:
	call opt_save
	;; jmp opt_replace

opt_replace:
	mov dl, msgloadfile
	call edit_name
	mov init_level, 0
	jmp throw


;;; Load file into the text buffer.  This may leave editing-related variables
;;; in an invalid state, so the caller must ensure that these will be
;;; re-initialized.
;;;
;;; On entry:
;;;    ARGBUF[...] holds file name (zero-terminated)
;;; On return:
;;;    All registers undefined.
;;;
load_file:
	call get_filename	; DX = ARGBUF, DI = &unsaved, Z = (b[DX] == 0)
	;;mov b[di], 0		; for "mov unsaved, 0"
	mov textbufend, textbuf	; Leave buffer in a known state
	jz ret			; Return if no filename
	;; open file
	mov ax, 03d00h		; open file named at DS:DX, AL=0 => read only
	int 021h
	jc >f2			; error, or file not found
	xchg ax, bx		; for "mov bx, ax";  BX = file handle
	call catch
	jc >f3
	mov cx, textbufmax
	inc cx			; ask for one too many bytes (uses slop)
	call get_size		; DX = start of buffer; CX = max # of bytes + 1
	mov ah, 03Fh		; code for Read from File function
	call dosint		; DOS call (goto load_error if error)
	cmp ax, cx		; if it read one too many...
	jne >f1			;   file is too big
	mov b[si], 0		; (SI=ARGBUF)
	mov al, msgfilebig
	jmps l_draw_status
f1:	add ax, dx		; AX = no. of bytes + textbuf
	mov textbufend, ax	; set end of text area
	call fclose
	test verbatim
	if z call remove_CRs	; remove CR's if NOT verbatim
	test init_level
	jz ret			; return now if being called at startup
	mov al, msgloaded
	jmps l_draw_status	; say:  Loaded "filename"

f2:	;;  Distinguish error from file-not-found
	cmp al, 2		; 2 => file not found
	;; mov al, msgnewfile	; msgnewfile == 2
	jz l_draw_status
f3:	;; Error
	mov al, msgreaderror
	;; Abort with message AL
l_draw_status:
	jmp draw_status		; Display message and return


;;; Set DX = textbuf, CX = size of text
;;;
get_range:
	mov cx, textbufend
get_size:
	mov dx, textbuf
	sub cx, dx
	ret

;;; Close file handle BX.
;;; Throws on error.
fclose:
	mov ah, 03Eh
	jmps dosint

;;; Throws on error.
write_text:
	test verbatim
	jz add_CRs
	call get_range
	;; jmp write_bytes	; save data DIRECTLY

;;; Write CX bytes at DX to file handle BX.
;;; Throws on error.
write_bytes:
	mov ah, 040h
	;; jmp dosint

;;; Execute int 021h and handle error.
;;; Throws on error.
dosint:	int 021h
	jnc ret
	jmp throw


;;; Ask for file name and save file
;;;
opt_save_as:
	mov dl, msgsavefile
	call edit_name
	;; jmp opt_save

;;; Save file to disk. (^X^S)
;;;
opt_save:
	call get_filename
	jz opt_save_as
	call catch
	jc >s2
	mov ah, 03Ch		; open file named at DX
	mov cl, 0
	call dosint
	xchg ax, bx		; for "mov bx, ax";  BX = file handle
	call write_text
	call fclose
	mov unsaved, 0
	mov al, msgfilesaved
s1:	jmp l_draw_status
s2:	call draw_page		; fix screen after DOS "Abort...?" msg
	mov al, msgerrorsaving	; say "Error saving file"
	jmp s1


;;; Expand all LF's to CR/LF's, save file, then remove all CR's.
;;; Copies text from [textbuf, textbufend] to [new_top, textbufmax],
;;; then back again.
;;; Watch for error conditions within areas where ES != video buffer
;;;
add_CRs:
	mov di, textbufmax
	mov si, textbufend
	mov b[si], 0	; Prevent the slop byte from causing insertion of a CR
	std		; perform move, moving one extra byte (uses slop)
a1:	cmp si, textbuf
	jb >l9			; done
	lodsb			; al = *[si--]
a2:	stosb			; *[di--] = al
	cmp al, 10
	jnz a1
	mov al, 13
	cmp di, si
	jne a2			; di > si : still enough room for another CR
	jmp a1			; not enough room; just copy bytes...
l9:	cld
	inc di
	mov dx, di		; DX = start of new copy
	mov cx, textbufmax
	sub cx, dx		; CX = number of bytes
	call write_bytes
	;; call remove_CRs
	;; remove_new_crs  : Copies text from [di, textbufmax] to [textbuf, textbufend]
	inc si
	xchg si, di		; now SI = new copy, DI = textbuf
	;; jmp remove_loop	; fall through

	;; remove_loop:  while removing CR's, move CX bytes from DS:SI to ES:DI.
remove_loop:
	jcxz >r9
r1:	lodsb
	cmp al, 13
	if nz stosb
	loop r1
r9:	mov textbufend, di
	ret

remove_CRs:
	call get_range		; CX = size, DX = textbuf
	mov di, dx
	mov si, di
	jmp remove_loop
	;; jmp remove_loop

edit_name:
	mov bp, ARGBUF
	mov si, bp
	mov di, fnamebuf
	push si
	call e2			; save copy of fname
	pop si
	cmp dl, msgloadfile
	jnz >e1
e0:	mov b[si], 0		; start with new file name
e1:	mov al, dl
	call draw_status
	mov si, bp
	mov al, 32
l0:	call draw_text_cell
l1:	lodsb
	test al
	jnz l0
	mov [si], al		; add an extra zero
	dec si			; SI now points to first terminating zero
	call set_cursor
l2:	call dispatch_key
	dvect keyESC, en_esc
	dvect keyENTER, en_ret
	dvect keyBKSP, en_bak
	dvect ctrlG, en_esc
	db 0
	jb l2
	mov [si], al		; Add literal character to file name
	jmp l1

en_esc:	pop ax			; return two levels...
	dec clrstat		; clrstat=1 => clear before next getkey
	mov si, fnamebuf	; SI = fnamebuf
	mov di, bp		; DI = ARGBUF
e2:	;; save copy of fname
	mov cx, FNAME_SIZE / 2
	rep movsw
en_ret:	ret

en_bak:	dec si
	cmp si, bp
	jb e1
	jmp e0

;;; Initialize registers & set Z if file name is not set.
;;;
get_filename:
	mov di, offset unsaved
	mov si, ARGBUF
	mov dx, si
	mov al, b[si]
	test al
	ret


;;; Get a keypress and then dispatch it.
;;;
;;; These functions accept a sequence of "dvect" structures: (key, value)
;;; pairs where key is a key code (byte) and value is PC-relative offset
;;; (byte-sized) to a code address.  These are passed as "immediate" arguments
;;; -- that is, they appear in memory after the call instruction -- and are
;;; terminated with a "db 0".
;;;
;;; If AL matches a key, these functions will jump (or "return to") the
;;;     address named in the matching dvect.
;;; If no match is found, the function jumps (returns to) the address
;;;     following the terminating "db 0".
;;;
;;; Destroys AX, DI
;;;
dispatch_key:
	call getkey
	;; jmp_dispatch_al

;;; Dispatch key value in AL
;;;
dispatch_al:
	pop di
	call get_assoc_b
	jc >g2			; not found
	push ax			; Found
	mov al, [di]
	cbw
	add di, ax
	pop ax
g2:	cmp al, 32
	jmp di
