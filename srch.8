;;; srch.8 : incremental search/replace
;;;
;;; b[srchbuf...srchbufend-1] holds the search string
;;; srcbufmax is the maximum value for srchbufend
;;;

;;; set C if #1 is in range 'A'...'Z' ;  changes contents of #1
isupper MACRO
	sub #1, 'A'
	cmp #1, 'Z'-'A'+1
#em

mov_al_1 MACRO
	db 0b8h		; opcode for mov ax, ...
#em

mov_al_2 MACRO
	mov al, 0b0h xor #1 xor #2
	xor al, 0b0h xor #1
#em


srchCURSOR	equ	219	; Solid block
srchFWD		equ	1
srchBACK	equ	-1

CSMASK		equ	0FF		; AND al, 0FF	leaves al unchanged.
NONCSMASK	equ	(not 32)	; AND al, 0DF	converts LC to UC


;;; Clear the search string and enter search mode, *or* (when recording
;;; a replacement macro) terminate recording.
;;;
;;; srchmode identifies how the searchkey should be interpreted:
;;;	0 => searching (initial mode)
;;;	3 => replace mode (perhaps during macro recording)
;;;	7 => replace-all mode
;;;
do_rsearch:	mov_al_1			; AL = srchBACK
do_fsearch:	mov_al_2 srchBACK, srchFWD	; AL = srchFWD
	mov ah, NONCSMASK	; start out non-case-sensitive
	test srchmode, ah	; if >0, we must be recording a macro
	if nz jmp mx_startstop	; stop macro
	mov srchdir_n_mask, ax	; srchdir=AL ; srchcsmask = NONCSMASK
	mov bp, srchbuf		; BP=srchbuf throughout this module
	mov srchend, bp
	mov dx, point
srch_start:
	;; Find next match starting at DX
	clear bh
l0:	;; Now: DX = start of matched string in text
	;;	BH = should_wrap  (non-zero => wrap at end)
	;;	b[srchbuf...srchend-1] = search string
	mov si, bp		; SI = srchbuf
	mov cx, srchend
	mov di, dx		; DI = srchpos
l1:	;; Now: SI = position being matched in srchbuf
	;;	CX = srchend
	;;	DI = position being matched in text
	cmp si, cx		; cmp si, srchend.  If at end of string,
	je srch_found		;    get user input.
	cmp di, textbufend
	jae >l2
	lodsb			; AL = [SI++]
	scasb			; cmp al, b[di++]
	je l1
	and al, srchcsmask	; If Non-CS, convert AL to UC
	;; This code assumes that for non-case sensitive searches,
	;; all search characters are lower case.
	cmp al, b[di-1]		; now see if b[di] is the same
	jne >l2			; If not, then definitely no match.
	isupper al		; Set C if AL is upper case letter
	jc l1			; If a letter =>  this was a match
	;; srchbuf[] and srchpos[] do not match... advance srchpos
l2:	mov al, srchdir
	cbw
	;; jmp srch_advance

;;; On entry: DX = position; AX = amount to advance; BH = should_wrap
;;;
srch_advance:
	;; Advance DX by AL bytes and find next match thereafter
	add dx, ax
	;; check bounds
	mov ax, textbufend
	cmp dx, textbuf
	jb >l5
	cmp dx, ax		; DX <= textbufend
	jbe l0
	mov ax, textbuf		; wrap to start of text
l5:	;; at end, but maybe wrap-around
	mov dx, ax
	test bh
	mov bh, 0
	jnz l0
	;; Failure: end of text reached
	mov al, msgSrchFail
	mov di, point
	mov dx, di
	jmps srch_input


;;; Backspace (executed from srch_input)
;;;
srch_do_bksp:
	cmp si, bp		; srchbuf == srchend ?
	je srch_getchar		; If so, do nothing.
	pop dx, wnd_ptr, di, si	; restore values describing previous position
	mov srchend, si
	;; jmp srch_found

;;; String found
;;;	DX = start of match in text
;;;	DI = end of match in text
srch_found:
	mov al, srchdir		; AL = 1 or 255
	add al, msgSrchR+1	; AL = msgSrchR or msgSrchF
	or al, srchmode		; If srchmode==3, AL = msgSrchRplc
	;; jmp srch_input

;;; Search state:  "[R-]Search:" / "Not Found:" / "Full! :"
;;;
;;; On entry:
;;;	AL = status message (msgSrchFail => string not found)
;;;	DI = point
;;;	DX = position of match (on success) or point (on failure)
;;;
srch_input:
	pusha
	call set_and_expose_point
	popa
srch_dispmsg:
	;; Display status message
	;;	AL = status message (msgSrchFail => failure)
	cbw
	push ax
	call draw_status	; "Search:" / "Not found: " / "Full!"
	inc bx			; for "inc bl"; advance one column
	;; Display search string
	mov si, bp
l1:	mov al, srchCURSOR
	cmp si, srchend
	if ne lodsb
	pushf
	call draw_text_cell
	popf
	jb l1
	call set_text_cursor	; Put the BIOS cursor in the text area
	;; In replace mode?
	pop bx
	test srchmode
	jz srch_getchar
	cmp bl, msgSrchFail	; failed?
	mov al, ctrlG		; restore old point on exit
	jz srch_do_quit
	jmp srch_replace

srch_getchar:
	;; On entry to srch_do_... handlers:
	;;	BP = srchbuf
	;;	SI = srchend
	;;	DX = current search position
	;;	BL = status message
	call dispatch_key	; destroys DI; sets AL
	bind_rel srch_do_bksp, keyBKSP
	bind_rel srch_do_quote, ctrlQ
	bind_rel srch_do_literal, keyTAB
	bind_rel srch_do_quit, keyESC, ctrlG
	bind_rel srch_do_rsrch, ctrlR
	bind_rel srch_do_fsrch, ctrlS
	bind_rel srch_do_rplc, ctrlBKSP
	db 0
	jge srch_do_literal	; AL >= 32
	ungetkey al		; Unknown Ctrl-char or extended code
	;; jmps srch_do_quit	; ungetkey() and quit search

srch_do_quit:
	;; Ctrl-G or Escape
	sub si, bp
	jz >l2			; search string empty
	mov srcholdlen, si	; remember this for the next time
	;; Pop all saved states
l1:	pop dx, bx, di, si
	cmp si, bp		; si==srchbuf ?
	jne l1			; pop state while not
	cmp al, ctrlG
	jne >l2
	;; ctrl-G => restore pre-search state
	mov wnd_ptr, bx
	call set_and_expose_point ; clobbers AX, BX, DI, SI, BP
l2:	mov srchmode, 0
	jmp maybe_clear_status	; return from do_[fr]search


;;; Get a key -- any key -- and add it to srchbuf.
;;;
srch_do_quote:
	call getkey
	;; jmps srch_do_literal

;;; Add char to srchbuf[] and resume search
;;;
srch_do_literal:
	cmp si, srchbufmax
	jb >l1
	call beep
	mov al, msgSrchFull
	jmp srch_dispmsg	; search buffer full
l1:	mov b[si], al		; add character to srchbuf[]
	isupper al		; if upper case, make search CASE-SENSITIVE
	if c mov srchcsmask, CSMASK
	mov cx, 1
	;; jmp srch_more


;; Lengthen search string by CX bytes & search again
;;    Push [srchend, point, wnd_ptr, pos] each time we lengthen
;;    These are popped incrementally on BKSP, or entirely on ESC, etc.
srch_more:
	push si, point, wnd_ptr, dx ; save current state
	add srchend, cx
	jmp srch_start


srch_do_rplc:
	cmp si, bp		; string length == 0 ?
	jz srch_getchar
	jmps rplc_play


rplc_quit:
	jmp srch_do_quit


;;; Ctrl-S/R : search for next occurrence, recall old string, or wrap around.
;;;
srch_do_rsrch:	mov_al_1			; AL = srchBACK (-1)
srch_do_fsrch:	mov_al_2 srchBACK, srchFWD	; AL = srchFWD (1)
	mov srchdir, al		; in case direction has changed
	cmp si, bp		; srchend == srchbuf?
	jne >l0
	mov cx, srcholdlen
	test cx
	jnz srch_more		; store SI in srchend & search
l0:	;; jmp rplc_next

rplc_next:
	clear cx
	;; jmp srch_again

;;; Advance point by len(srchbuf) - CX and continue searching
;;;	DX = current search position
;;;	CX = number of characters deleted (in replacement operation)
;;;	BL = status message
;;;
srch_again:
	sub si, bp
	mov ax, si
	imul srchdir		; AX = amount to advance
	mov bh, 0
	cmp bl, msgSrchFail
	if e mov bh, 1		; wrap around
	jmp srch_advance


;;; rplc_all / srch_replace: Handle search/replace interaction
;;; On entry:
;;; 	SI = srchend
;;;	bp = srchbuf
rplc_all:
	mov srchmode, 7
srch_replace:
	cmp srchmode, 4
	jae rplc_play		; go if in "Replace ALL" mode
	call dispatch_key
	db 0
	jb rplc_quit
	or al, 32
	call dispatch_al
	bind_rel rplc_quit, 'q'	; beware out-of-range offsets...
	bind_rel rplc_next, 'n'
	bind_rel rplc_play, 'y'
	bind_rel rplc_all, 'a'
	db 0
	jne srch_replace	; not spacebar
	;; jmp rplc_play	; spacebar => replace


;;; Delete occurrence, then record/play macro
;;;
rplc_play:
	mov cx, textbufend
	pusha
	;; delete from DX (start of match) to POINT
	mov si, point
	mov di, dx
	call set_point
	call delete_region_redisp
	;;
	mov si, mx_play		; call mx_play with AX=0
	mov al, msgSrchRec	; msgSrchRec == 3
	cmp al, srchmode
	jbe >l1                 ; we're already replacing
	mov srchmode, al        ; srchmode=3 indicating we're replacing now
	call draw_status	; AL=3 => "Type ^S when done..."
	mov clrstat, 0
	mov si, mx_record	; call mx_record with AX=0
l1:	mov al, ctrlR		; Ctrl-R represents the replace macro
	call si			; Record or Play macro "0"
	popa
	sub cx, textbufend	; CX = # of chars. deleted
	mov bl, 0
	jmp srch_again
