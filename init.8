;;; init.8 : Data & macros.  Must appear first in list of modules.

EOT_CHAR	equ 236	 ; Omega character; displayed at end of text
MXBUF_SIZE	equ 300	 ; 1 byte per keystroke, 2 per macro, 2 per nest level
SRCHBUF_SIZE	equ 32	 ; Warning: each character needs 8 bytes of stack...
FNAME_SIZE	equ 07Eh ; maximum size of file name
ARGBUF		equ 081h ; address of argument buffer; used to hold file name
TABCHAR		equ 9

;;; The data segment contains variables that overlap the once-used
;;; 3-byte jmp instruction that begins the code segment.

data segment
	org 0100h
cursor		label word
cursorX		db ?
cursorY		db ?
clrstat		db ?		; controls clearing of status line


code segment

main:	jmp start

init_level	db 0		; use up (and zero-intialize) the extra byte before EVEN

EVEN

;;;
;;; **Warning**: The ordering of the following variables is significant.
;;;     Refer to the initialization logic before re-ordering.
;;;

dyn_buffers:
mxbufmax	dw ?		; see key.8
mxdefsend	dw ?
mxbuf		dw
srchbufmax	dw ?		; see srch.8
srchbuf		dw ?
fnamebuf	dw		; temp file name
textbufmax	dw ?

;;; Search state

srchend		dw ?		; ptr to end of srchbuf[]
srchdir_n_mask	dw
srchdir		db ?		; search direction
srchcsmask	db ?		; 0FF if case sensitive, 95 if not
srchmode	db ?
srcholdlen	dw 0		; 0 => no previous search string

;;; Undo state

ub_end		dq
ub_pos		dw ?
ub_seg		dw 0		; ub_init assumes ub_limit follows ub_seg.
ub_limit	dw ?
ub_undo_pos	dw ?

;;; Cut buffer

	;; The ordering of cb_eg and cb_limit is significant; see init_bufs.
cb_end		dq
cb_size		dw 0		; number of bytes in the cut buffer
cb_seg		dw ?		; segment pointer to start of cut buffer
cb_limit	dw ?		; maximum size of the cut buffer

;;; Misc.

catch_sp	dw ?		; SP saved by catch

;;; Display location

topleft		label word	; A quick way to access xoff and yoff
xoff		db 0		; (xoff,yoff) is an offset to which all other
yoff		db 0		;    (x,y) coordinates are relative.
disp_cols	db 0		; set by '-w' argument (width of window)
disp_lines	db 0		; set by '-l' argument (# lines in window)
maxX		db ?		; = disp_cols-1	(highest column # for text)
maxY		db ?		; = disp_lines-1 (highest line # for text)
hgt_and_wid	dw
scrwid		db 0		; screen width in columns (set on startup)
scrhgt		db 0		; screen height in lines (set by '-L')

screen_seg	dw
		db 0
screen_page	db 0		; If screen_page == 0 then write to screen buf
				; (When non-zero, screen_seg holds screen mem)

;;; macro state

mxptr		dw ?	; playback pointer (0 => playback off)
			; Points to character getkey will return
mxrecptr	dw ?	; record pointer  (0 => not recording)
			; mxrecptr points to next place to store a char
mxsp		dw ?	; limit for macro definitions (starts = mxbufmax)
ungotkey	db 0


;;; Editing state

targetX		db 0		; stores column for goto next/prev line fns.
verbatim	db 0		; non-zero => disable CR removal/insertion
dispmode	db 0		; Specifies representation of ctrl chars


changes		label word	; Set 'unsaved' and 'deleted' at one time
unsaved		db 0		; 0FFh if there are unsaved changes
cutting		db 0		; set when the previous key added to the cut buffer
wnd_ptr		dw ?		; = Where in text the top-left of screen is.
wnd_drawn	dw ?		; value of 'wnd_ptr' at time of last draw_page
point		dw ?		; Current edit point in text (where cursor is)
text_mark	dw 0		; Current mark setting (0 indicates not set)
textbufend	dw textbuf	; Points to byte after end of text.

;;; Text display settings

txtcolor	db 0Eh		; color for document text
inv_and_hlt	dw		; get hlt and inv at once
invcolor	db 020h		; inverse color
hltcolor	db 7		; highlighted color
tabwid		db 8		; "-tX" changes this.
newline		db 10		; character denoting end of logical line (-nX)
				; If "-n.." is given, verbatim should be set!


;;; menudef LABEL PROMPT COUNT [VECTOR NAME]+
;;;
menudef MACRO
#1:	db #2		; prompt message ID
	db #3		; count (number of options)
	dw #1_L		; keymap
  #ry5l
	db #y		; option names (5, 7, 9, ...)  [message IDs]
  #e2
  #rx4l
	dw #x		; option vectors (4, 6, 8, ...)
  #e2
#1_L: db
#EM

jmps MACRO jmp short #1 #EM

clear MACRO sub #1, #1 #EM

shr4 MACRO shr #1, 4 #EM	; redefine to be 286 specific or not

pushi MACRO push #1 #EM		; 286 specific or not.  Since the 8086 version
				; might use AX, use this as if it trashes AX.

clc_skip1 MACRO db 0A8h #EM	; "test al,ib" : Clears carry, skips next byte

skip2 MACRO db 0a9h #EM		; "test ax, im"... next 2 bytes are imm data

ungetkey MACRO mov ungotkey, #1 #EM

jmpon MACRO
	cmp al, #1
	jz #2
#EM

;;; bind_w VALUE, KEY... : Associate byte keys with word values
;;;
bind_w MACRO #rx2l
	db  #x		; key
	dw  offset #1	; value
  #er
#em

;;; bind_b VALUE, KEY...  : Associate byte keys and values
;;;
bind_b MACRO #rx2l
	db  #x, #1	; key, value
  #er
#em

;;; bind_rel LABEL, KEY...
;;;
;;; Associate an address with one or more KEY values.  NOTE: The address is
;;; stored as an 8-bit relative offset.
;;;
bind_rel MACRO #rx2l
	db #x, #1 - $	; key, value
  #er
#em

;;;
;;; Command-line arguments
;;;

argbindings:
	bind_rel xoff, 'x'
	bind_rel yoff, 'y'
	bind_rel tabwid, 't'
	bind_rel disp_cols, 'w'
	bind_rel disp_lines, 'l'
	bind_rel newline, 'n'
	bind_rel txtcolor, 'c'
	bind_rel invcolor, 'i'
	bind_rel hltcolor, 'h'
	bind_rel screen_page, 'b'	; set 'screen_page' to pre-defined value
	db 0

;;;
;;; Key codes: These are values returned by `getkey`
;;;

keyBKSP		equ 8
keyDEL		equ -83
keyDOWN		equ -80
keyEND		equ -79
keyENTER	equ 13
keyESC		equ 27
keyHOME		equ -71
keyLEFT		equ -75
keyPGDN		equ -81
keyPGUP		equ -73
keyRIGHT	equ -77
keySPC		equ 32
keyTAB		equ 9
keyUP		equ -72
keyF1		equ -59
keyF10		equ -68
altA		equ -30
altB		equ -48
altF		equ -33
altG		equ -34
altM		equ -50
altN		equ -49
altP		equ -25
altV		equ -47
altZ		equ -44
altF1		equ -104
altF10		equ -113
ctrlA		equ 1
ctrlB		equ 2
ctrlC		equ 3
ctrlD		equ 4
ctrlE		equ 5
ctrlF		equ 6
ctrlG		equ 7
ctrlJ		equ 10
ctrlK		equ 11
ctrlL		equ 12
ctrlN		equ 14
ctrlO		equ 15
ctrlP		equ 16
ctrlQ		equ 17
ctrlR		equ 18
ctrlS		equ 19
ctrlT		equ 20
ctrlV		equ 22
ctrlW		equ 23
ctrlW		equ 23
ctrlX		equ 24
ctrlY		equ 25
ctrlZ		equ 26
ctrlAT		equ -3	; -131 -> -3
ctrlUNDER	equ 31
ctrlBKSP	equ 127
ctrlBKSL	equ 28
ctrlEND		equ -117
ctrlLEFT	equ -115
ctrlPGDN	equ -118
ctrlPGUP	equ -4	; -132 -> -4
ctrlRIGHT	equ -116

;;;
;;; Message indices
;;;

msgBanner	equ 1
msgIntr		equ 2
msgSrchRec	equ 3	; == 3 (see srch.8)
msgSrchR	equ 4
msgSrchFull	equ 5
msgSrchF	equ 6
msgSrchRplc	equ 7	; == msgSrchF OR 3 == msgSrchR OR 3  (see srch.8)
msgSrchFail	equ 8
msgMXRec	equ 9
msgMXDone	equ 10
msgMXLoop	equ 11
msgMXFull	equ 12
msgFileLoad	equ 13
msgFileSave	equ 14
msgFileBig	equ 15
msgFileLoaded	equ 16
msgFileNew	equ 17
msgReadError	equ 18
msgSaveError	equ 19
msgFileSaved	equ 20
msgUndoEmpty	equ 21
msgUndoing	equ 22
msgTextFull	equ 23
msgCutFull	equ 24
msgMarkSet	equ 25
msgMarkNot	equ 26

dosmsgBadArg:	db 'TM: bad argument$'
dosmsgNoMem:	db 'TM: Not enough memory$'

msg0:	db 0
	db 'TM 1.5', 0				;  1 TM 1.5
	db '^G', 0				;  2 ^G
	db 'Type ^S when done', -46, 0		;  3 Type ^S when done...
	db 'R-', -14, 0				;  4 R-Search:
	db -38, ' :', 0				;  5 Full! :
	db 'Search:', 0				;  6 Search:
	db -34, '? (Y,N,A,Q) :', 0		;  7 Replace? (Y, N, A, Q) :
	db -42, 'found:', 0			;  8 Not found:
	db -49, -41, -50, -46, 0		;  9 recording macro...
	db -50, ' ', -49, 'ed', 0		; 10 Macro recorded
	db -50, ' loop!', 0			; 11 Macro loop!
	db -50, -51, 0				; 12 Macro Buffer Full!
	db -29, -48, 0				; 13 Load File:
	db -27, -48, 0				; 14 Save File:
	db -39, ' too big!', 0			; 15 File too big!
	db -29, 'ed', -40, 0			; 16 Loaded "FILE"
	db 'New', -48, -40, 0			; 17 New File: "<fnm>"
	db -29, ' ', -45, '!', 0		; 18 Load Error!
	db -45, ' Sav', -41, -39, '!', 0  	; 19 Error Saving File!
	db -27, 'd', -40, 0			; 20 Saved "<fnm>"
	db 'No more ', -44, '!', 0		; 21 No more undo!
	db -44, -41, -46, 0			; 22 undoing...
	db -39, -51, 0				; 23 File Buffer Full!
	db 'Cut', -51, 0			; 24 Cut Buffer Full!
	db -43, 'set', 0			; 25 Mark set
	db -43, -42, 'set!', 0			; 26 Mark not set!
	db 'S', -52, 0				; 27 Save
	db 's', -52, ' As', 0		        ; 28 save As
	db 'Load', 0				; 29 Load
	db 'Quit', 0				; 30 Quit
	db 'No', 0				; 31 No
	db 'Yes', 0				; 32 Yes
	db -27, -47, 0				; 33 Save changes
	db 'Replace', 0				; 34 Replace
	db 'Option:', 0                         ; 35 Option
	db -30, ' and lose', -47, '?', 0 	; 36 Quit and lose changes?
	db -29, ':', -40, ' uns', -52, 'd', 0	; 37 Load: "FILE" unsaved
	db 'Full!', 0				; 38 Full!
	db 'File', 0				; 39 File
	db ' "', -128, '"', 0			; 40 "FILE"
	db 'ing ', 0				; 41 ing
	db 'not ', 0				; 42 not
	db 'Mark ', 0				; 43 Mark
	db 'undo', 0				; 44 undo
	db 'Error', 0				; 45 Error
	db '...', 0				; 46 ...
	db ' changes', 0			; 47  changes
	db ' ', -39, ':', 0			; 48  File:
	db 'record', 0				; 49 record
	db 'macro', 0				; 50 macro
	db ' buffer ', -38, 0			; 51  Buffer Full!
	db 'ave', 0				; 52 ave


menudef esc_menu, 35, 4, opt_save, 27, opt_save_as, 28, opt_load, 29, opt_quit, 30
	bind_b 1, 'S', ctrlS
	bind_b 2, 'A', ctrlW
	bind_b 3, 'L', ctrlF
	bind_b 4, 'Q', ctrlC
	db 0

menudef exit_menu, 36, 3, opt_done, 31, opt_quit_y, 32, opt_quit_save, 27
	bind_b 1, 'N'
	bind_b 2, 'Y'
	bind_b 3, 'S'
	db 0

menudef load_menu, 37, 2, opt_load_save, 33, opt_replace, 34
	bind_b 1, 'S'
	bind_b 2, 'R'
	db 0


;;; Key bindings
;;;
;;; When a key is pressed, key_aliases is used to translate it, and then
;;; fn_bindings is searched for a function to execute.  The last entry in
;;; fn_bindings (with key_code 0) applies when no other entries match.
;;;

fn_bindings:
	bind_w do_literal, ctrlJ, keyTAB
	bind_w do_enter, keyENTER
	bind_w do_backspace, keyBKSP
	bind_w go_up, keyUP
	bind_w go_dn, keyDOWN
	bind_w go_lft, keyLEFT
	bind_w go_rgt, keyRIGHT
	bind_w go_pgup, keyPGUP
	bind_w go_pgdn, keyPGDN
	bind_w go_top, ctrlPGUP
	bind_w go_btm, ctrlPGDN
	bind_w go_home, keyHOME
	bind_w go_end, keyEND
	bind_w go_lft_word, ctrlLEFT
	bind_w go_rgt_word, ctrlRIGHT
	bind_w go_scrlup, altN
	bind_w go_scrldn, altP
	bind_w do_recenter, ctrlL
	bind_w do_delete, keyDEL
	bind_w do_kill, ctrlEND
	bind_w do_ctrlq, ctrlQ
	bind_w do_esc, keyESC
	bind_w do_yank, ctrlY
	bind_w do_appendnext, altA
	bind_w do_setmark, ctrlAT
	bind_w do_deltomark, ctrlW
	bind_w do_fsearch, ctrlS
	bind_w do_rsearch, ctrlR
	bind_w do_xchgmark, ctrlBKSL
	bind_w do_abort, ctrlG
	bind_w do_stripCRs, altM
	bind_w do_twiddle, ctrlT
	bind_w do_dispmode, altG
	bind_w do_insline, ctrlO
	bind_w do_undo, ctrlUNDER
	bind_w do_mx, 0


key_aliases:
	bind_b keyUP, ctrlP	; translate ctrlP to keyUP
	bind_b keyDOWN, ctrlN
	bind_b keyLEFT, ctrlB
	bind_b keyRIGHT, ctrlF
	bind_b keyPGUP, altV
	bind_b keyPGDN, ctrlV
	bind_b keyHOME, ctrlA
	bind_b keyEND, ctrlE
	bind_b ctrlLEFT, altB
	bind_b ctrlRIGHT, altF
	bind_b keyDEL, ctrlD
	bind_b ctrlEND, ctrlK
	bind_b keyESC, ctrlX
	db 0


;;; `dimension` structure:
;;;
;;; This block of variables consists of pairs of (x, y) values corresponding
;;; to window size parameters and limits.  It can be accessed as separate
;;; interleaved strucutures: one which tells everything about X dimensions,
;;; one which does the same for y dimensions.  (That is how set_dimensions
;;; works -- it performs limit checking on the X values the same way it
;;; performs the limit checking on Y values.)

dimension struc [si]
	d_offs	db 2 dup ?
	d_cols	db 2 dup ?
	d_max	db 2 dup ?
	d_wid	db ?
ends
